<h1 class="fw-bold">Gestión de Productos en Tiempo Real</h1>

<div class="my-4">
    <img id="banner" src="/img/banner.jpg" alt="Banner promocional de LabelTech" class="img-fluid">
</div>

<div class="bg-white p-4 rounded shadow-sm mx-auto my-5" style="max-width: 800px;">
    <h2 class="text-center mb-4">Agregar Nuevo Producto</h2>
    <form id="productForm">
        <div class="mb-3">
            <label for="title" class="form-label">Título:</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Descripción:</label>
            <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
        </div>
        <div class="mb-3">
            <label for="code" class="form-label">Código:</label>
            <input type="text" class="form-control" id="code" name="code" required>
        </div>
        <div class="mb-3">
            <label for="price" class="form-label">Precio:</label>
            <input type="number" class="form-control" id="price" name="price" step="0.01" required>
        </div>
        <div class="mb-3">
            <label for="stock" class="form-label">Stock:</label>
            <input type="number" class="form-control" id="stock" name="stock" required>
        </div>
        <div class="mb-3">
            <label for="category" class="form-label">Categoría:</label>
            <input type="text" class="form-control" id="category" name="category" required>
        </div>
        <div class="mb-3">
            <label for="thumbnails" class="form-label">URL de Imagen (opcional):</label>
            <input type="url" class="form-control" id="thumbnails" name="thumbnails">
        </div>
        <div class="text-center">
            <button type="submit" class="btn btn-primary btn-lg">Agregar Producto</button>
        </div>
    </form>
</div>

<div class="my-5">
    <h2 class="text-center mb-4">Productos Actuales</h2>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Título</th>
                    <th>Descripción</th>
                    <th>Código</th>
                    <th>Precio</th>
                    <th>Stock</th>
                    <th>Categoría</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="productsTableBody">
                {{#each products}}
                <tr id="product-{{this.id}}">
                    <td>{{this.id}}</td>
                    <td>{{this.title}}</td>
                    <td>{{this.description}}</td>
                    <td>{{this.code}}</td>
                    <td>${{this.price}}</td>
                    <td>{{this.stock}}</td>
                    <td>{{this.category}}</td>
                    <td>
                        <button class="btn btn-danger btn-sm delete-btn" data-product-id="{{this.id}}">Eliminar</button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
</div>

<script>
    const socket = io(); // Conectar al servidor de Socket.IO

    const productForm = document.getElementById('productForm');
    const productsTableBody = document.getElementById('productsTableBody');

    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(productForm);
        const product = {};
        formData.forEach((value, key) => {
            if (key === 'price' || key === 'stock') {
                product[key] = parseFloat(value);
            } else if (key === 'thumbnails') {
                product[key] = value ? [value] : [];
            } else {
                product[key] = value;
            }
        });
        socket.emit('newProduct', product);
        productForm.reset();
    });

    productsTableBody.addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-btn')) {
            const productId = e.target.dataset.productId;
            socket.emit('deleteProduct', productId);
        }
    });

    socket.on('updateProducts', (products) => {
        productsTableBody.innerHTML = ''; // Limpiar la tabla
        products.forEach(product => {
            const row = document.createElement('tr');
            row.id = `product-${product.id}`;
            row.innerHTML = `
                <td>${product.id}</td>
                <td>${product.title}</td>
                <td>${product.description}</td>
                <td>${product.code}</td>
                <td>$${product.price}</td>
                <td>${product.stock}</td>
                <td>${product.category}</td>
                <td>
                    <button class="btn btn-danger btn-sm delete-btn" data-product-id="${product.id}">Eliminar</button>
                </td>
            `;
            productsTableBody.appendChild(row);
        });
    });

    socket.on('productError', (message) => {
        alert(`Error: ${message}`);
    });
</script>